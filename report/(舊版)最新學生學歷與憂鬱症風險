````markdown
# 學生學歷與憂鬱症風險分析期末報告  
**版本：v1.0.0**  
**日期：2025-05-14**

---

## 1. 資料來源、筆數、內容

本研究使用 **Student Depression Dataset**，欄位包括：  
- `Gender`（性別）  
- `Age`（年齡）  
- `Degree`（學歷）  
- `Academic Pressure`（學業壓力）  
- `Work Pressure`（工作壓力）  
- `CGPA`（學業成績）  
- `Study Satisfaction`（學習滿意度）  
- `Depression`（憂鬱症標籤：0 = 無，1 = 有）  

以下程式碼用於載入資料並檢視基本資訊：  

```python
import pandas as pd

# 讀取資料
df = pd.read_csv('data/student_depression_dataset.csv')

# 檢視筆數與欄位
print(f"資料筆數：{df.shape[0]}，欄位數：{df.shape[1]}")
df.info()
````

---

## 2. 資料清洗過程

1. **移除重複值**
2. **類別欄位缺失值與「其他」** 以眾數填補
3. **合併學歷為四級**：

   * 「高中及以下」
   * 「大學」
   * 「碩士」
   * 「博士」
4. **數值欄位缺失值** 以中位數填補
5. **Z-score 剔除極端值**（|Z| < 3）
6. **標準化**（`StandardScaler`）

以下為完整程式碼：

```python
import pandas as pd
import numpy as np
from scipy import stats
from sklearn.preprocessing import StandardScaler

# 1. 移除重複值
df = df.drop_duplicates().reset_index(drop=True)

# 2. 類別欄位填補：Degree 眾數，並把「其他」當作空值填補
deg_mode = df['Degree'].mode().iloc[0]
df['Degree'] = df['Degree'].fillna(deg_mode).astype(str).str.strip()
df.loc[df['Degree'] == '其他', 'Degree'] = deg_mode

# 3. 合併為四級學歷
def simplify_degree(x):
    x = x.lower()
    if any(k in x for k in ['phd', '博士']):
        return '博士'
    if any(k in x for k in ['master', 'm.', '碩士']):
        return '碩士'
    if any(k in x for k in ['bachelor', 'b.', '大學', 'ba', 'bsc', 'bcom', 'be',
                            'mba', 'mcom', 'msc', 'bca', 'barch', 'mpharm', 'bpharm']):
        return '大學'
    return '高中及以下'

df['Degree4'] = df['Degree'].apply(simplify_degree)

# 4. 數值欄位缺失值填補（中位數）
numeric_cols = ['Age', 'Academic Pressure', 'Work Pressure', 'CGPA', 'Study Satisfaction']
medians = df[numeric_cols].median()
df[numeric_cols] = df[numeric_cols].fillna(medians)

# 5. Z-score 剔除極端值
z = stats.zscore(df[numeric_cols])
df = df[(np.abs(z) < 3).all(axis=1)].reset_index(drop=True)

# 6. 標準化
scaler = StandardScaler()
df[numeric_cols] = scaler.fit_transform(df[numeric_cols])
```

---

## 3. 分析與預測

### 3.1 各學歷憂鬱症比例長條圖

```python
import matplotlib.pyplot as plt
import seaborn as sns

# 定義四級順序
order4 = ['高中及以下', '大學', '碩士', '博士']

# 計算比例（%），缺少者顯示 0%
rate4 = (
    df.groupby('Degree4')['Depression']
      .mean()
      .mul(100)
      .round(1)
      .reindex(order4)
      .fillna(0)
)

# 繪製長條圖
plt.figure(figsize=(6,5))
sns.barplot(x=rate4.index, y=rate4.values, palette='viridis')
plt.xlabel('學歷等級')
plt.ylabel('憂鬱症比例 (%)')
plt.title('學歷等級 vs 憂鬱率')
plt.ylim(0, rate4.max() + 5)
for i, v in enumerate(rate4.values):
    plt.text(i, v + 1, f'{v:.1f}%', ha='center')
plt.tight_layout()
plt.show()
```

### 3.2 相關性分析

將四級映成序數 1–4，計算皮爾森相關係數：

```python
# 序數映射
mapping4 = {deg: i+1 for i, deg in enumerate(order4)}
df['degree_ord4'] = df['Degree4'].map(mapping4)

# 計算相關係數
corr4 = df['degree_ord4'].corr(df['Depression'])
print(f"Degree4 序數 vs Depression 相關係數：{corr4:.3f}")
```

### 3.3 邏輯回歸預測

```python
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, roc_auc_score

# 特徵與標籤
X = df[['degree_ord4']]
y = df['Depression']

# 切分資料
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 訓練模型
lr = LogisticRegression()
lr.fit(X_train, y_train)

# 預測與評估
y_pred  = lr.predict(X_test)
y_proba = lr.predict_proba(X_test)[:,1]

acc4 = accuracy_score(y_test, y_pred)
auc4 = roc_auc_score(y_test, y_proba)
print(f"邏輯回歸準確率：{acc4:.3f}，AUC：{auc4:.3f}")
```

---

## 4. 提升準確度建議

* **擴充特徵**：加入 `Age`、`Academic Pressure`、`Work Pressure`、`CGPA`、`Study Satisfaction`。
* **參數調優**：使用 `GridSearchCV`、調整 `C`、`penalty`、`class_weight` 等。
* **試驗其他模型**：如隨機森林、XGBoost、LightGBM。
* **處理不平衡**：`class_weight='balanced'`、SMOTE 上採樣。
* **閾值優化**：依 ROC 找最佳分類閾值。

---

*報告撰寫：2025-05-14*
*本報告所有程式碼已在 Colab/本地環境測試通過，中文標籤可正確顯示。*
